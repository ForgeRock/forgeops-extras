{
  "metadata" : {
    "realm" : null,
    "entityType" : "ScriptingService",
    "entityId" : "default/globalScripts/c4f22465-2368-4e27-8013-e6399974fd48",
    "uid" : "ou=c4f22465-2368-4e27-8013-e6399974fd48,ou=globalScripts,ou=default,ou=GlobalConfig,ou=1.0,ou=ScriptingService,ou=services,ou=am-config",
    "sunServiceID" : "globalScript",
    "objectClass" : [ "sunServiceComponent", "top" ],
    "pathParams" : { },
    "ou" : [ "c4f22465-2368-4e27-8013-e6399974fd48" ]
  },
  "data" : {
    "_id" : "default/globalScripts/c4f22465-2368-4e27-8013-e6399974fd48",
    "_type" : {
      "_id" : "ScriptingService",
      "name" : "ScriptingService",
      "collection" : false
    },
    "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "evaluatorVersion" : "V1_0",
    "creationDate" : "1433147666269",
    "language" : "JAVASCRIPT",
    "script" : "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.\n *\n * Defined variables:\n * session - SSOToken (1)\n *           The single sign-on session.\n * hostedEntityId - String (primitive).\n *                  The hosted entity ID.\n * remoteEntityId - String (primitive).\n *                  The remote entity ID.\n * realm - String (primitive).\n *         The name of the realm the user is authenticating to.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER\n * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)\n *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.\n *\n * Throws SAML2Exception:\n *      - on failing to map the IDP attributes.\n *\n * Return - a list of SAML Attribute (3) objects.\n *\n * Class reference:\n * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.\n * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.\n */\n\n/**\n * Default SAML2 IDP Attribute Mapper.\n */\nfunction getAttributes() {\n    var frJava = JavaImporter(\n        com.sun.identity.saml2.common.SAML2Exception\n    );\n\n    const debugMethod = \"ScriptedIDPAttributeMapper.getAttributes:: \";\n\n    try {\n\n        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {\n            logger.error(debugMethod + \"Invalid session.\");\n            return null;\n        }\n\n        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);\n        logger.message(debugMethod + \"Remote SP attribute map = {}\", configMap);\n        if (configMap == null || configMap.isEmpty()) {\n            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);\n            if (configMap == null || configMap.isEmpty()) {\n                logger.message(debugMethod + \"Configuration map is not defined.\");\n                return null;\n            }\n            logger.message(debugMethod + \"Hosted IDP attribute map = {}\", configMap);\n        }\n\n        var attributes = new java.util.ArrayList();\n        var stringValueMap = new java.util.HashSet();\n        var binaryValueMap;\n        var localAttribute;\n\n        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.\n        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {\n            try {\n                // Resolve attributes to be read from the datastore.\n                var stringAttributes = new java.util.HashSet();\n                var binaryAttributes = new java.util.HashSet();\n                var keyIter = configMap.keySet().iterator();\n                while (keyIter.hasNext()) {\n                    var key = keyIter.next();\n                    localAttribute = configMap.get(key);\n                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                            // add it to the list of attributes to treat as being binary\n                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));\n                        } else {\n                            stringAttributes.add(localAttribute);\n                        }\n                    }\n                }\n\n                if (!stringAttributes.isEmpty()) {\n                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);\n                }\n                if (!binaryAttributes.isEmpty()) {\n                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);\n                }\n            } catch (error) {\n                logger.error(debugMethod + \"Error accessing the datastore. \" + error);\n                //continue to check in ssotoken.\n            }\n        }\n\n        var keyIter = configMap.keySet().iterator();\n        while (keyIter.hasNext()) {\n            var key = keyIter.next()\n            var nameFormat = null;\n            var samlAttribute = key;\n            localAttribute = configMap.get(key);\n            // check if samlAttribute has format nameFormat|samlAttribute\n            var samlAttributes = String(new java.lang.String(samlAttribute));\n            var tokens = samlAttributes.split('|');\n\n            if (tokens.length > 1) {\n                nameFormat = tokens[0];\n                samlAttribute = tokens[1];\n            }\n\n            var attributeValues = new java.util.HashSet();\n            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                // Remove the static flag before using it as the static value\n                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);\n                attributeValues = new java.util.HashSet([localAttribute]);\n                logger.message(debugMethod + \"Adding static value {} for attribute named {}\", localAttribute, samlAttribute);\n            } else {\n                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                    // Remove the flag as not used for lookup\n                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);\n                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,\n                        binaryValueMap);\n                } else {\n                    if (stringValueMap != null && !stringValueMap.isEmpty()) {\n                        attributeValues = stringValueMap.get(localAttribute);\n                    } else {\n                        logger.message(debugMethod + \"{} string value map was empty or null.\", localAttribute);\n                    }\n                }\n\n                // If all else fails, try to get the value from the users ssoToken\n                if (attributeValues == null || attributeValues.isEmpty()) {\n                    logger.message(debugMethod + \"User profile does not have value for {}, checking SSOToken.\", localAttribute);\n                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));\n                }\n            }\n\n            if (attributeValues == null || attributeValues.isEmpty()) {\n                logger.message(debugMethod + \"{} not found in user profile or SSOToken.\", localAttribute);\n            } else {\n                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));\n            }\n        }\n\n        return attributes;\n\n    } catch (error) {\n        logger.error(debugMethod + \"Error mapping IDP attributes. \" + error);\n        throw new frJava.SAML2Exception(error);\n    }\n}\n\ngetAttributes();",
    "description" : "Default global script for SAML2 IDP Attribute Mapper",
    "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "context" : "SAML2_IDP_ATTRIBUTE_MAPPER",
    "lastModifiedDate" : "1433147666269",
    "name" : "SAML2 IDP Attribute Mapper Script"
  }
}