{
  "metadata" : {
    "realm" : null,
    "entityType" : "ScriptingService",
    "entityId" : "default/globalScripts/58c824ae-84ed-4724-82cd-db128fc3f6c",
    "uid" : "ou=58c824ae-84ed-4724-82cd-db128fc3f6c,ou=globalScripts,ou=default,ou=GlobalConfig,ou=1.0,ou=ScriptingService,ou=services,ou=am-config",
    "sunServiceID" : "globalScript",
    "objectClass" : [ "sunServiceComponent", "top" ],
    "pathParams" : { },
    "ou" : [ "58c824ae-84ed-4724-82cd-db128fc3f6c" ]
  },
  "data" : {
    "_id" : "default/globalScripts/58c824ae-84ed-4724-82cd-db128fc3f6c",
    "_type" : {
      "_id" : "ScriptingService",
      "name" : "ScriptingService",
      "collection" : false
    },
    "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "evaluatorVersion" : "V1_0",
    "creationDate" : "1433147666269",
    "language" : "GROOVY",
    "script" : "/*\n * Copyright 2020-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue managedUser = json(object(\n        field(\"givenName\", normalizedProfile.givenName),\n        field(\"sn\", normalizedProfile.familyName),\n        field(\"mail\", normalizedProfile.email),\n        field(\"userName\", normalizedProfile.username)))\n\nif (normalizedProfile.postalAddress.isNotNull()) managedUser.put(\"postalAddress\", normalizedProfile.postalAddress)\nif (normalizedProfile.addressLocality.isNotNull()) managedUser.put(\"city\", normalizedProfile.addressLocality)\nif (normalizedProfile.addressRegion.isNotNull()) managedUser.put(\"stateProvince\", normalizedProfile.addressRegion)\nif (normalizedProfile.postalCode.isNotNull()) managedUser.put(\"postalCode\", normalizedProfile.postalCode)\nif (normalizedProfile.country.isNotNull()) managedUser.put(\"country\", normalizedProfile.country)\nif (normalizedProfile.phone.isNotNull()) managedUser.put(\"telephoneNumber\", normalizedProfile.phone)\n\n// if the givenName and familyName is null or empty\n// then add a boolean flag to the shared state to indicate names are not present\n// this could be used elsewhere\n// for eg. this could be used in a scripted decision node to by-pass patching\n// the user object with blank values when givenName  and familyName is not present\nboolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())\nboolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())\nsharedState.put(\"nameEmptyOrNull\", noGivenName && noFamilyName)\n\n\nreturn managedUser",
    "description" : "Converts a normalized social profile into a managed user",
    "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "context" : "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "lastModifiedDate" : "1433147666269",
    "name" : "Normalized Profile to Managed User"
  }
}