{
  "metadata" : {
    "realm" : null,
    "entityType" : "ScriptingService",
    "entityId" : "default/globalScripts/9de3eb62-f131-4fac-a294-7bd170fd4acb",
    "uid" : "ou=9de3eb62-f131-4fac-a294-7bd170fd4acb,ou=globalScripts,ou=default,ou=GlobalConfig,ou=1.0,ou=ScriptingService,ou=services,ou=am-config",
    "sunServiceID" : "globalScript",
    "objectClass" : [ "sunServiceComponent", "top" ],
    "pathParams" : { },
    "ou" : [ "9de3eb62-f131-4fac-a294-7bd170fd4acb" ]
  },
  "data" : {
    "_id" : "default/globalScripts/9de3eb62-f131-4fac-a294-7bd170fd4acb",
    "_type" : {
      "_id" : "ScriptingService",
      "name" : "ScriptingService",
      "collection" : false
    },
    "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "evaluatorVersion" : "V1_0",
    "creationDate" : "1433147666269",
    "language" : "JAVASCRIPT",
    "script" : "/*\n * Copyright 2015-2021 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n/**\n * This is a Policy Condition example script. It demonstrates how to access a user's information,\n * use that information in external HTTP calls and make a policy decision based on the outcome.\n */\n\nvar userAddress, userIP, resourceHost;\n\nif (validateAndInitializeParameters()) {\n\n    var countryFromUserAddress = getCountryFromUserAddress();\n    logger.message(\"Country retrieved from user's address: \" + countryFromUserAddress);\n    var countryFromUserIP = getCountryFromUserIP();\n    logger.message(\"Country retrieved from user's IP: \" + countryFromUserIP);\n    var countryFromResourceURI = getCountryFromResourceURI();\n    logger.message(\"Country retrieved from resource URI: \" + countryFromResourceURI);\n\n    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {\n        logger.message(\"Authorization Succeeded\");\n        responseAttributes.put(\"countryOfOrigin\", [countryFromUserAddress]);\n        authorized = true;\n    } else {\n        logger.message(\"Authorization Failed\");\n        authorized = false;\n    }\n\n} else {\n    logger.message(\"Required parameters not found. Authorization Failed.\");\n    authorized = false;\n}\n\n/**\n * Use the user's address to lookup their country of residence.\n *\n * @returns {*} The user's country of residence.\n */\nfunction getCountryFromUserAddress() {\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(userAddress));\n  \trequest.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var geocode = JSON.parse(response.getEntity());\n    var i;\n    for (i = 0; i < geocode.results.length; i++) {\n        var result = geocode.results[i];\n        var j;\n        for (j = 0; j < result.address_components.length; i++) {\n            if (result.address_components[i].types[0] == \"country\") {\n                return result.address_components[i].long_name;\n            }\n        }\n    }\n}\n\n/**\n * Use the user's IP to lookup the country from which the request originated.\n *\n * @returns {*} The country from which the request originated.\n */\nfunction getCountryFromUserIP() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + userIP);\n  \trequest.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Use the requested resource's host name to lookup the country where the resource is hosted.\n *\n * @returns {*} The country in which the resource is hosted.\n */\nfunction getCountryFromResourceURI() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + encodeURIComponent(resourceHost));\n  \trequest.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Retrieve and validate the variables required to make the external HTTP calls.\n *\n * @returns {boolean} Will be true if validation was successful.\n */\nfunction validateAndInitializeParameters() {\n    var userAddressSet = identity.getAttribute(\"postalAddress\");\n    if (userAddressSet == null || userAddressSet.isEmpty()) {\n        logger.warning(\"No address specified for user: \" + username);\n        return false;\n    }\n    userAddress = userAddressSet.iterator().next();\n    logger.message(\"User address: \" + userAddress);\n\n    if (!environment) {\n        logger.warning(\"No environment parameters specified in the evaluation request.\");\n        return false;\n    }\n\n    var ipSet = environment.get(\"IP\");\n    if (ipSet == null || ipSet.isEmpty()) {\n        logger.warning(\"No IP specified in the evaluation request environment parameters.\");\n        return false;\n    }\n    userIP = ipSet.iterator().next();\n    logger.message(\"User IP: \" + userIP);\n\n    if (!resourceURI) {\n        logger.warning(\"No resource URI specified.\");\n        return false;\n    }\n    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];\n    logger.message(\"Resource host: \" + resourceHost);\n\n    return true;\n}\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity());\n}",
    "description" : "Default global script for Scripted Policy Conditions",
    "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "context" : "POLICY_CONDITION",
    "lastModifiedDate" : "1433147666269",
    "name" : "Scripted Policy Condition"
  }
}