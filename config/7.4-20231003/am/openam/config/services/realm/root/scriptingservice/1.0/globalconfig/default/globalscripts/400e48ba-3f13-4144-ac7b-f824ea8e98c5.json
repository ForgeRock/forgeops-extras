{
  "metadata" : {
    "realm" : null,
    "entityType" : "ScriptingService",
    "entityId" : "default/globalScripts/400e48ba-3f13-4144-ac7b-f824ea8e98c5",
    "uid" : "ou=400e48ba-3f13-4144-ac7b-f824ea8e98c5,ou=globalScripts,ou=default,ou=GlobalConfig,ou=1.0,ou=ScriptingService,ou=services,ou=am-config",
    "sunServiceID" : "globalScript",
    "objectClass" : [ "sunServiceComponent", "top" ],
    "pathParams" : { },
    "ou" : [ "400e48ba-3f13-4144-ac7b-f824ea8e98c5" ]
  },
  "data" : {
    "_id" : "default/globalScripts/400e48ba-3f13-4144-ac7b-f824ea8e98c5",
    "_type" : {
      "_id" : "ScriptingService",
      "name" : "ScriptingService",
      "collection" : false
    },
    "createdBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "evaluatorVersion" : "V1_0",
    "creationDate" : "1433147666269",
    "language" : "JAVASCRIPT",
    "script" : "/*\n * Copyright 2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you to derive the configuration for a dynamic JWT issuer from the issuer string.\n * A JWT issuer is made up of the following:\n *   - issuer - the identifier of the entity that issues JWTs\n *   - resource owner subject claim - the name of the claim in the JWT that identifies the resource owner\n *   - consented scope claim - the name of the claim in the JWT that represents scope that the resource owner\n *                             has already consented to externally\n *   - authorized subjects - the set of principal identifiers that are authorized to be used as resource owners\n *                           by the issuer\n *   - JWKs - either a set of JWKs or connection details for obtaining that set, that are the public keys that\n *            can verify the signature on the issued JWTs.\n *\n * Defined variables:\n * issuer - String\n *          The issuer from the bearer JWT.\n * realm - String\n *         The path of the realm that is handling the request.\n * scriptName - String.\n *              Always present, the display name of the script.\n * logger - Always present, the script debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_SCRIPTED_JWT_ISSUER.\n * httpClient - HTTP Client (1).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n * idRepository - Identity Repository (2). Always present.\n * secrets - Secrets accessor (3). Always present.\n *\n * Return - org.forgerock.oauth2.core.TrustedJwtIssuerConfig (4) - the configuration of the trusted JWT issuer.\n *\n * Class reference:\n * (1) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (2) ScriptedIdentityRepository - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/identity/ScriptedIdentityRepository.html.\n * (3) ScriptedSecrets - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/secrets/ScriptedSecrets.html.\n * (4) TrustedJwtIssuerConfig - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/TrustedJwtIssuerConfig.html.\n */\n\n/* EXAMPLE\n(function () {\n    var frJava = JavaImporter(\n        org.forgerock.oauth2.core.TrustedJwtIssuerConfig,\n        java.util.Collections\n    );\n\n    var iss = idRepository.getIdentity(issuer);\n    if (iss == null) {\n        logger.message('No issuer found for: '+issuer);\n        return null;\n    }\n    logger.message('Found issuer: '+iss);\n    // in this example either a JWK set or a URI to a JWK set are in the postalAddress attribute\n    var jwksAttrs = iss.getAttributeValues('postalAddress');\n    var jwkSet = jwksAttrs.length === 0 ? null : jwksAttrs[0];\n    var config = new frJava.TrustedJwtIssuerConfig(\n        issuer,\n        'sub',\n        'scope',\n        // in this example, valid subjects are stored in the mail attribute\n        iss.getAttributeValues('mail'),\n        jwkSet.startsWith('{') ? jwkSet : null,\n        jwkSet.startsWith('http') ? jwkSet : null,\n        '5 minutes',\n        '1 minute'\n    );\n    return config;\n}());\n*/",
    "description" : "Default global script for scripted JWT Issuers",
    "lastModifiedBy" : "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "context" : "OAUTH2_SCRIPTED_JWT_ISSUER",
    "lastModifiedDate" : "1433147666269",
    "name" : "OAuth2 JWT Issuer Script"
  }
}